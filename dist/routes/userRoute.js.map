{"version":3,"sources":["../../src/routes/userRoute.js"],"names":["router","post","exists","withMessage","not","isEmpty","isNumeric","matches","FULL_NAME_REGEX","CPF_REGEX","isLength","min","isString","req","res","next","console","log","query","errors","send","get","isAlphanumeric"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;AAGA,IAAMA,SAAS,sBAAf;;AAEA;;AAEAA,OAAOC,IAAP,CAAY,WAAZ,EAAyB,CACrB,6BAAM,WAAN,EAAmBC,MAAnB,GAA4BC,WAA5B,CAAwC,uBAAxC,EACCC,GADD,GACOC,OADP,GACiBF,WADjB,CAC6B,2BAD7B,EAECC,GAFD,GAEOE,SAFP,GAEmBH,WAFnB,CAE+B,6BAF/B,EAGCI,OAHD,CAGSC,eAHT,EAG0BL,WAH1B,CAGsC,mCAHtC,CADqB,EAMrB,6BAAM,KAAN,EAAaD,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,EACCC,GADD,GACOC,OADP,GACiBF,WADjB,CAC6B,qBAD7B,EAECI,OAFD,CAESE,eAFT,EAEoBN,WAFpB,CAEgC,qBAFhC,CANqB,EAUrB,6BAAM,UAAN,EAAkBD,MAAlB,GAA2BC,WAA3B,CAAuC,uBAAvC,EACCC,GADD,GACOC,OADP,GACiBK,QADjB,CAC0B,EAAEC,KAAK,CAAP,EAD1B,EACsCR,WADtC,CACkD,yCADlD,EAECS,QAFD,GAEYT,WAFZ,CAEwB,4BAFxB,CAVqB,CAAzB,EAaG,UAACU,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;;AAElBC,YAAQC,GAAR,CAAYJ,IAAIK,KAAhB;;AAEA,QAAMC,SAAS,wCAAiBN,GAAjB,CAAf;;AAEA,QAAG,CAACM,OAAOd,OAAP,EAAJ,EACIS,IAAIM,IAAJ,CAASD,MAAT,EADJ,KAGIL,IAAIM,IAAJ,CAASP,IAAIK,KAAb;AAEP,CAxBD;;AA0BAlB,OAAOqB,GAAP,CAAW,QAAX,EAAqB,CACjB,6BAAM,KAAN,EAAanB,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,EACCC,GADD,GACOC,OADP,GACiBE,OADjB,CACyBE,eADzB,EACoCN,WADpC,CACgD,qBADhD,EAECC,GAFD,GAEOkB,cAFP,GAEwBnB,WAFxB,CAEoC,uBAFpC,CADiB,EAIjB,6BAAM,UAAN,EAAkBD,MAAlB,GAA2BC,WAA3B,CAAuC,uBAAvC,EACCC,GADD,GACOC,OADP,GACiBK,QADjB,CAC0B,EAAEC,KAAK,CAAP,EAD1B,EACsCR,WADtC,CACkD,yCADlD,EAECS,QAFD,GAEYT,WAFZ,CAEwB,4BAFxB,CAJiB,CAArB,EAOG,UAACU,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;;AAElB,QAAMI,SAAS,wCAAiBN,GAAjB,CAAf;;AAEA,QAAG,CAACM,OAAOd,OAAP,EAAJ,EACIS,IAAIM,IAAJ,CAASD,MAAT,EADJ,KAGIL,IAAIM,IAAJ,CAAS,WAAT;AAEP,CAhBD;;kBAmBepB,M","file":"userRoute.js","sourcesContent":["import { Router } from 'express';\r\nimport { check, validationResult } from 'express-validator';\r\nimport CPF_REGEX from '../Utils/Utils';\r\nimport FULL_NAME_REGEX from '../Utils/Utils';\r\n\r\nconst router = Router();\r\n\r\n// TODO Mudar query to Body\r\n\r\nrouter.post('/register', [\r\n    check('full_name').exists().withMessage(\"Full name is required\")\r\n    .not().isEmpty().withMessage(\"Full name cannot be empty\")\r\n    .not().isNumeric().withMessage(\"Full name must be a string.\")\r\n    .matches(FULL_NAME_REGEX).withMessage(\"Full name must be characters only\"),\r\n\r\n    check('cpf').exists().withMessage(\"CPF is required.\")\r\n    .not().isEmpty().withMessage(\"CPF cannot be empty\")\r\n    .matches(CPF_REGEX).withMessage(\"Invalid cpf format.\"),\r\n\r\n    check('password').exists().withMessage(\"Password is required.\")\r\n    .not().isEmpty().isLength({ min: 5 }).withMessage(\"Password must be at least 5 chars long.\")\r\n    .isString().withMessage(\"Password must be a string.\")   \r\n], (req, res, next) =>{\r\n\r\n    console.log(req.query)\r\n\r\n    const errors = validationResult(req);\r\n\r\n    if(!errors.isEmpty())\r\n        res.send(errors);\r\n    else\r\n        res.send(req.query);\r\n\r\n});\r\n\r\nrouter.get('/login', [\r\n    check('cpf').exists().withMessage(\"CPF is required.\")\r\n    .not().isEmpty().matches(CPF_REGEX).withMessage(\"Invalid cpf format.\")\r\n    .not().isAlphanumeric().withMessage(\"CPF must be a string.\"),\r\n    check('password').exists().withMessage(\"Password is required.\")\r\n    .not().isEmpty().isLength({ min: 5 }).withMessage('Password must be at least 5 chars long.')\r\n    .isString().withMessage(\"Password must be a string.\")   \r\n], (req, res, next) =>{\r\n\r\n    const errors = validationResult(req);\r\n\r\n    if(!errors.isEmpty())\r\n        res.send(errors);\r\n    else\r\n        res.send(\"Validated\");\r\n\r\n});\r\n\r\n\r\nexport default router;"]}